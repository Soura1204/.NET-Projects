@model List<RegistrationApp.Models.RegistrationModel>

@{
    ViewData["Title"] = "Registered Candidates";
}
@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show mt-3" role="alert">
        @TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

    @{
    var fname = Context.Request.Cookies["UserFName"];
    var lname = Context.Request.Cookies["UserLName"];
    var email = Context.Request.Cookies["UserEmail"];
}

@if (!string.IsNullOrEmpty(fname) && !string.IsNullOrEmpty(email))
{
    <div class="text-end text-success pe-2 pt-2">
        Welcome, <strong>@fname @lname</strong> (<small>@email</small>)
    </div>
}

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

<div class="container mt-4">
    <h2 class="text-center mb-4">Registered Candidates</h2>

    <table class="table table-bordered table-hover">
        <thead class="table-dark">
            <tr>
                <th>Name</th>
                <th>Address</th>
                <th>DOB</th>
                <th>Email</th>
                <th>Mobile</th>
                <th>Image</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>@item.FName @item.LName</td>
                    <td>@item.Address</td>
                    <td>@item.DOB?.ToString("yyyy-MM-dd")</td>
                    <td>@item.Email</td>
                    <td>@item.MobileNo</td>
                    <td>
                        @if (!string.IsNullOrEmpty(item.ImagePath))
                        {
                            var cleanPath = item.ImagePath.Replace("\\", "/").TrimStart('~', '/');
                            var apiBase = "https://localhost:7028"; // Your API base URL
                            var imageUrl = apiBase + "/" + cleanPath.TrimStart('/');
                            <img src="@imageUrl" width="80" height="80" class="img-thumbnail" 
                                 onerror="this.onerror=null; this.src='/images/no-image.png';" />
                        }
                        else
                        {
                            <img src="/images/no-image.png" width="80" height="80" class="img-thumbnail" />
                        }
                    </td>
                    <td>
                        <button class="btn btn-sm btn-primary"
                                data-bs-toggle="modal"
                                data-bs-target="#editModal"
                                onclick='populateEditForm(@Html.Raw(System.Text.Json.JsonSerializer.Serialize(new {
                                    item.Id,
                                    item.FName,
                                    item.LName,
                                    item.Address,
                                    DOB = item.DOB?.ToString("yyyy-MM-dd"),
                                    item.Email,
                                    item.MobileNo,
                                    item.ImagePath,
                                    item.ContentType
                                })))'>
                            Edit
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<!-- Edit Modal -->
<div class="modal fade" id="editModal" tabindex="-1" aria-labelledby="editModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <form method="post" enctype="multipart/form-data" asp-controller="Registration" asp-action="Update" id="editForm">
                <input type="hidden" name="Id" id="editId" />
                <input type="hidden" name="ImagePath" id="editImagePath" />
                <div class="modal-header">
                    <h5 class="modal-title">Edit Candidate</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body row g-3">
                    <div class="col-md-6">
                        <label>First Name</label>
                        <input type="text" class="form-control" name="FName" id="editFName" required />
                    </div>
                    <div class="col-md-6">
                        <label>Last Name</label>
                        <input type="text" class="form-control" name="LName" id="editLName" required />
                    </div>
                    <div class="col-md-12">
                        <label>Address</label>
                        <input type="text" class="form-control" name="Address" id="editAddress" required />
                    </div>
                    <div class="col-md-6">
                        <label>DOB</label>
                        <input type="date" class="form-control" name="DOB" id="editDOB" required />
                    </div>
                    <div class="col-md-6">
                        <label>Email</label>
                        <input type="email" class="form-control" name="Email" id="editEmail" required />
                    </div>
                    <div class="col-md-6">
                        <label>Mobile No</label>
                        <input type="text" class="form-control" name="MobileNo" id="editMobileNo" required pattern="\d{10}" />
                    </div>
                    <div class="col-md-6">
                        <label>Image</label>
                        <input type="file" class="form-control" name="Image" id="editImageFile" />
                        <input type="hidden" name="ContentType" id="editContentType" />
                        <img id="editImagePreview" src="" alt="Image Preview" class="img-thumbnail mt-2" width="100" style="display:none;" />
                        <p id="currentImageText" class="text-muted small" style="display:none;">(Current Image)</p>
                    </div>
                </div>
                <div class="modal-footer mt-3">
                    <button type="button" class="btn btn-success" onclick="submitEditForm()">Update</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
    function populateEditForm(data) {
        document.getElementById('editId').value = data.Id || 0;
        document.getElementById('editFName').value = data.FName || '';
        document.getElementById('editLName').value = data.LName || '';
        document.getElementById('editAddress').value = data.Address || '';
        document.getElementById('editDOB').value = data.DOB || '';
        document.getElementById('editEmail').value = data.Email || '';
        document.getElementById('editMobileNo').value = data.MobileNo || '';
        document.getElementById('editImagePath').value = data.ImagePath || '';

        const imgPrev = document.getElementById('editImagePreview');
        const txt = document.getElementById('currentImageText');

        if (data.ImagePath) {
    let cleanPath = data.ImagePath.replace(/\\/g, '/').replace(/^~?\//, '');
    imgPrev.src = 'https://localhost:7028/' + cleanPath;
            imgPrev.style.display = 'block';
            txt.style.display = 'block';
        } else {
            imgPrev.src = '';
            imgPrev.style.display = 'none';
            txt.style.display = 'none';
        }
    }

    function submitEditForm() {
        const form = document.getElementById('editForm');
        const formData = new FormData(form);
        fetch('/Registration/Update', { method: 'POST', body: formData })
            .then(res => res.json())
            .then(result => {
                if (result.success) {
                    bootstrap.Modal.getInstance(document.getElementById('editModal')).hide();
                    location.reload(true);
                } else {
                    let err = result.message;
                    if (result.errors) err += '\n' + Object.entries(result.errors).map(e => `${e[0]}: ${e[1].join(',')}`).join('\n');
                    alert('Update failed:\n' + err);
                }
            })
            .catch(e => { console.error(e); alert('Error updating.'); });
    }

    // Show preview for newly selected image
    document.getElementById('editImageFile').addEventListener('change', function (e) {
        const file = e.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = function (e) {
                const imgPrev = document.getElementById('editImagePreview');
                imgPrev.src = e.target.result;
                imgPrev.style.display = 'block';
                document.getElementById('currentImageText').style.display = 'none';
            };
            reader.readAsDataURL(file);
        }
    });
</script>
